#!/bin/bash

# üöÄ Script de Deploy Automatizado - Gemini ChatBot
# Este script facilita o processo de deploy para Render e Vercel

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  üöÄ Gemini ChatBot Deploy${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Verificar se estamos no diret√≥rio raiz do projeto
check_project_root() {
    if [ ! -f "render.yaml" ] || [ ! -f "vercel.json" ]; then
        print_error "Este script deve ser executado no diret√≥rio raiz do projeto!"
        exit 1
    fi
}

# Verificar depend√™ncias
check_dependencies() {
    print_message "Verificando depend√™ncias..."
    
    # Verificar Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 n√£o encontrado!"
        exit 1
    fi
    
    # Verificar Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n√£o encontrado!"
        exit 1
    fi
    
    # Verificar npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n√£o encontrado!"
        exit 1
    fi
    
    print_message "‚úÖ Todas as depend√™ncias est√£o instaladas"
}

# Testar backend localmente
test_backend() {
    print_message "Testando backend localmente..."
    
    cd backend
    
    # Verificar se requirements.txt existe
    if [ ! -f "requirements.txt" ]; then
        print_error "requirements.txt n√£o encontrado!"
        exit 1
    fi
    
    # Instalar depend√™ncias
    print_message "Instalando depend√™ncias Python..."
    pip install -r requirements.txt
    
    # Verificar se .env existe
    if [ ! -f ".env" ]; then
        print_warning ".env n√£o encontrado. Criando arquivo de exemplo..."
        echo "GEMINI_API_KEY=your_api_key_here" > .env
        print_warning "‚ö†Ô∏è  Configure sua GEMINI_API_KEY no arquivo .env"
    fi
    
    # Testar se o servidor inicia
    print_message "Testando inicializa√ß√£o do servidor..."
    timeout 10s python main.py &
    SERVER_PID=$!
    
    sleep 3
    
    # Testar health check
    if curl -s http://localhost:5000/health > /dev/null; then
        print_message "‚úÖ Backend funcionando corretamente"
        kill $SERVER_PID 2>/dev/null || true
    else
        print_error "‚ùå Backend n√£o est√° respondendo"
        kill $SERVER_PID 2>/dev/null || true
        exit 1
    fi
    
    cd ..
}

# Testar frontend localmente
test_frontend() {
    print_message "Testando frontend localmente..."
    
    cd frontend
    
    # Verificar se package.json existe
    if [ ! -f "package.json" ]; then
        print_error "package.json n√£o encontrado!"
        exit 1
    fi
    
    # Instalar depend√™ncias
    print_message "Instalando depend√™ncias Node.js..."
    npm install
    
    # Testar build
    print_message "Testando build de produ√ß√£o..."
    npm run build
    
    if [ -d "build" ]; then
        print_message "‚úÖ Build de produ√ß√£o criado com sucesso"
    else
        print_error "‚ùå Falha no build de produ√ß√£o"
        exit 1
    fi
    
    cd ..
}

# Verificar configura√ß√£o do Git
check_git() {
    print_message "Verificando configura√ß√£o do Git..."
    
    if [ ! -d ".git" ]; then
        print_error "Este n√£o √© um reposit√≥rio Git!"
        exit 1
    fi
    
    # Verificar se h√° mudan√ßas n√£o commitadas
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas no reposit√≥rio"
        read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message "Deploy cancelado. Commit suas mudan√ßas primeiro."
            exit 1
        fi
    fi
    
    # Verificar branch atual
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ]; then
        print_warning "‚ö†Ô∏è  Voc√™ est√° na branch '$CURRENT_BRANCH', n√£o na 'main'"
        read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message "Deploy cancelado. Mude para a branch main primeiro."
            exit 1
        fi
    fi
    
    print_message "‚úÖ Configura√ß√£o do Git OK"
}

# Verificar configura√ß√£o dos servi√ßos
check_services() {
    print_message "Verificando configura√ß√£o dos servi√ßos..."
    
    # Verificar render.yaml
    if [ ! -f "render.yaml" ]; then
        print_error "render.yaml n√£o encontrado!"
        exit 1
    fi
    
    # Verificar vercel.json
    if [ ! -f "vercel.json" ]; then
        print_error "vercel.json n√£o encontrado!"
        exit 1
    fi
    
    print_message "‚úÖ Arquivos de configura√ß√£o encontrados"
}

# Deploy para GitHub (trigger autom√°tico)
deploy_to_github() {
    print_message "Fazendo push para GitHub (deploy autom√°tico)..."
    
    # Verificar se h√° mudan√ßas para fazer push
    if [ -z "$(git status --porcelain)" ]; then
        print_warning "N√£o h√° mudan√ßas para fazer push"
        return
    fi
    
    # Adicionar todas as mudan√ßas
    git add .
    
    # Commit com timestamp
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    git commit -m "üöÄ Deploy autom√°tico - $TIMESTAMP"
    
    # Push para main
    git push origin main
    
    print_message "‚úÖ Push realizado com sucesso"
    print_message "üîó Render e Vercel far√£o deploy autom√°tico"
}

# Mostrar status dos deploys
show_deploy_status() {
    print_message "Status dos deploys:"
    echo
    echo "üìä Backend (Render):"
    echo "   - URL: https://chat-lleria.onrender.com"
    echo "   - Health Check: https://chat-lleria.onrender.com/health"
    echo
    echo "üåê Frontend (Vercel):"
    echo "   - URL: https://gemini-chatbot.vercel.app"
    echo
    echo "üìù Logs:"
    echo "   - Render: https://dashboard.render.com"
    echo "   - Vercel: https://vercel.com/dashboard"
    echo
    print_warning "‚ö†Ô∏è  Os deploys podem levar alguns minutos para completar"
}

# Fun√ß√£o principal
main() {
    print_header
    
    # Verificar se estamos no diret√≥rio correto
    check_project_root
    
    # Verificar depend√™ncias
    check_dependencies
    
    # Verificar configura√ß√£o do Git
    check_git
    
    # Verificar configura√ß√£o dos servi√ßos
    check_services
    
    # Testar backend
    test_backend
    
    # Testar frontend
    test_frontend
    
    # Deploy para GitHub
    deploy_to_github
    
    # Mostrar status
    show_deploy_status
    
    print_message "üéâ Deploy iniciado com sucesso!"
    print_message "Acompanhe o progresso nos dashboards dos servi√ßos"
}

# Executar fun√ß√£o principal
main "$@" 